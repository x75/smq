#+TITLE: smq todo foo

#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \renewcommand{\familydefault}{\sfdefault}
#+OPTIONS: toc:nil

* Items
** TODO add brains
 - interest models, learning from kinesis / kinesis as explorer
 - im, imol, actinf, eh, iso, ...
 - hyperopt'ing
 - x taxis
 - x kinesis

** TODO add robots
 - sphero
 - cartpole
 - x stdr
 - x arm
 - x check pointmass kinematic vs. dynamic control: doesn't evenmake
   sense for kinematic control?

** TODO add worlds
*** TODO pointmass world
  - add force fields
  - add structure and obstacles
  - x increase dimensions 3, 10

** TODO sm space
 - dimensions again: need to be able to access sm variables by name
   from anywhere (!!!)
 - partition order: make sure that the order of sm space partitions is
   consistent with respect to smdict keys etc
 - provide for an efficient way of integrating very high dimensional
   observations, like images without generating high dimensional
   column name arrays etc

*** DONE dimensions

 what is system, what is robot, what are dimensions, do proper spec of
  - proprioceptive
  - exteroceptive
  - interoceptive
  - reward system: pain, pleasure, hunger, ...
** TODO fix plotting
 - distinguish analyses and plots
 - x plotting proper from prototype
   - x switch to pandas dataframes as structured arrays seem weird
   - x fix hardcoded tablename
 - x dataframes also solve the column name problem
 - x make sure plot funcs are dealing with figures and axes, so there
   can be a final aggregation of different parts into a final figure
   that can also be saved to print format

** TODO failsafe
 - make failsafe checks for configuration consistency

** TODO integration / robots lib
 - ideally, i would like to have a library of systems which can be
   equipped with wrappers for: explauto, ROS, ... probably using
   decorators
 - x use explauto or not? _no_

** TODO experiment specification

experiments.py

how to define experiment structure in conf that can capture different
example scenarios like:
 -  single episode learning
 -  multi episode learning (value func prop)
 -  multi episode optimization (hpo, cma, evo, ...)
 -  infinite episode, ...
 -  single episode, single model, single task
 -  single run multiple models single task
 -  optimization run single model single task

IDEA: use a generic type "loop" which has a "step" method and a
"stack" member, stacks being ordered dicts/lists of "loops"

** TODO high-level design qu's
 - x how to separate world, robot, task appropriately: current state
   (v2) seems ok

** TODO logging
 - how logging and ros publishing is the same or not: ROS also
   involves inputs whereas logging is only one-way
 - logging/publishing decorators
 - profiling log function, compare log2 (direct hdf5) + log3 (via pandas)
 - x column names for tables

** TODO tasks
the actually interesting bit
 - artificial organism with brain equation: bacterial random search,
   directional field, internal simulation, TSPwAC
 - motor babbling
 - goal babbling
 - ...
** TODO efus
 - ultrastability
 - explorer (kinesis, interest models)
 - learner

** TODO dynamic challenges

 -  dynamic creation of new variables
 -  dynamic length of run
 -  dynamic structural changes

** TODO neural networks
 -  include tricks of the trade foo: input cleaning, square augmented ...
 -  include deep learning foo

** TODO testing
 - do unit testing

** TODO submodules

which parts to do as submodules:
 -  noiselib: uniform, gaussian, binomial, pareto, ...
 -  learnlib: rls, force, eh, iso, ...
 -   losslib: mse, mae, pi, ais, ...
 -  analylib: plot timeseries, plot histograms, plot hexbin, plot
            dimstack, scattermatrix, ...

** DONE Filesystem

Separate the core component lib from the actual experiments,
specification, and logging data.

Put that into smp_experiments.
